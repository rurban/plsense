#!/usr/local/bin/perl5.24.1-nt

use strict;
use warnings;
use Getopt::Long;
use IO::Socket;
use File::Spec;
use File::Basename;
use Time::Piece;
use Try::Tiny;
use PlSense::Logger;
use PlSense::SocketClient;
use PlSense::ProjectManager;

my %opthelp_of = ("-h, --help"     => "Show this message.",
                  "-c, --cachedir" => "Path of directory caching information for Completion/Help.",
                  "--port1"        => "Port number for listening by main server process. Default is 33333.",
                  "--port2"        => "Port number for listening by work server process. Default is 33334.",
                  "--port3"        => "Port number for listening by resolve server process. Default is 33335.",
                  "--maxtasks"     => "Limit count of task that run on server process.",
                  "--loglevel"     => "Level of logging. Its value is for Log::Handler.",
                  "--logfile"      => "Path of log file.",
                  );

my %function_of = (status    => \&get_status,
                   pid       => \&get_own_pid,
                   removeall => \&remove_all,
                   build     => \&build,
                   buildr    => \&build_recursive,
                   buildf    => \&build_force,
                   buildrf   => \&build_recursive_force,
                   buildfr   => \&build_recursive_force,
                   open      => \&open_file,
                   current   => \&current_file,
                   ps        => \&get_process_list,
                   queue     => \&get_task_queue,
                   finfind   => \&finish_find,
                   finbuild  => \&finish_build,
                   );
$0 = join(" ",('plsense-server-work',@ARGV));
my ($cachedir, $port1, $port2, $port3, $maxtasks, $loglvl, $logfile);
GetOptions ('help'       => sub { show_usage(); exit 0; },
            'cachedir=s' => \$cachedir,
            'port1=i'    => \$port1,
            'port2=i'    => \$port2,
            'port3=i'    => \$port3,
            'maxtasks=i' => \$maxtasks,
            'loglevel=s' => \$loglvl,
            'logfile=s'  => \$logfile,
            );

setup_logger($loglvl, $logfile);
if ( ! $cachedir || ! -d $cachedir ) {
    logger->fatal("Not exist cache directory [$cachedir]");
    exit 1;
}
if ( ! $loglvl ) { $loglvl = ''; }
if ( ! $logfile ) { $logfile = ''; }
if ( ! $maxtasks || $maxtasks !~ m{ ^\d+$ }xms ) { $maxtasks = 20; }

my $scli = PlSense::SocketClient->new({ mainport => $port1,
                                        workport => $port2,
                                        resolveport => $port3,
                                        retryinterval => 0.2,
                                        maxretry => 10 });

my $sock = IO::Socket::INET->new(LocalAddr => "localhost",
                                 LocalPort => $scli->get_workport,
                                 Proto => "tcp",
                                 Listen => 1,
                                 ReUse => 1,
                                 );
if ( ! $sock ) {
    logger->fatal("Can't create socket : $!");
    exit 1;
}
if ( ! $sock->listen ) {
    logger->fatal("Can't listening port [$port2] : $!");
    exit 1;
}

my $projmanager = PlSense::ProjectManager->new();
my %taskinfo_of;
my @taskqueue;
my $reqprojnm = undef;

$SIG{WINCH} = sub { logger->notice("Receive SIGWINCH"); kill_all_task(); exit 0; };
$SIG{TERM} = sub { logger->notice("Receive SIGTERM"); kill_all_task(); exit 0; };
$SIG{USR1} = sub { logger->notice("Receive SIGUSR1"); kill_all_task(); accept_client(); };
$SIG{HUP} = sub { logger->notice("Receive SIGHUP"); kill_all_task(); accept_client(); };

accept_client();
exit 0;


sub show_usage {
    my $optstr = "";
    OPTHELP:
    foreach my $key ( sort keys %opthelp_of ) {
        $optstr .= sprintf("  %-25s %s\n", $key, $opthelp_of{$key});
    }

    print <<"EOF";
Run PlSense Work Server.
Work Server manages task that find/build module.

Usage:
  plsense-server-work [Option]

Option:
$optstr
EOF
    return;
}

sub accept_client {
    logger->info("Starting work server");

    initialize();
    ACCEPT_CLIENT:
    while ( my $cli = $sock->accept ) {
        logger->debug("Waiting client ...");

        my $line = $cli->getline || "";
        chomp $line;
        logger->info("Receive request : $line");
        my $cmdnm = $line =~ s{ ^ \s* ([a-z]+) }{}xms ? $1 : "";
        if ( $cmdnm eq "quit" ) {
            $cli->close;
            next ACCEPT_CLIENT;
        }
        elsif ( $cmdnm eq "stop" ) {
            $cli->close;
            last ACCEPT_CLIENT;
        }
        elsif ( exists $function_of{$cmdnm} ) {
            try {
                my $fnc = $function_of{$cmdnm};
                my $ret = &$fnc($line) || "";
                $cli->print($ret);
                $cli->flush;
                run_task();
            }
            catch {
                my $e = shift;
                logger->error("Failed do $cmdnm : $e");
            };
        }
        else {
            logger->error("Unknown command [$cmdnm]");
        }
        $cli->close;

    }
    $sock->close;

    logger->info("Stopping work server");
}

sub initialize {
    my @dirs;
    LIBPATH:
    foreach my $dir ( qx{ perl -e 'pop \@INC; print join("\\n", \@INC);' } ) {
        chomp $dir;
        if ( ! -d $dir ) { next LIBPATH; }
        push @dirs, $dir;
    }
    add_find_task(1, "installed", @dirs);
    run_task();
    $projmanager->clear_current_project;
    return;
}

sub run_task {
    my $now = localtime;
    my $taskcount = 0;
    CHK_TIMEOUT:
    foreach my $key ( keys %taskinfo_of ) {
        my $task = $taskinfo_of{$key};
        if ( $now > $task->{limit} ) {
            logger->notice("Timeout task : $key");
            my $pid = $task->{pid};
            if ( $pid && kill(0, $pid) ) {
                kill 'INT', $pid;
            }
            elsif ( $key =~ m{ \A build \s+ (.+) \z }xms ) {
                my $mdl_or_file = $1;
                logger->notice("Request reload module of zombie task : $key");
                $scli->request_main_server("built $mdl_or_file");
            }
            delete $taskinfo_of{$key};
        }
        else {
            $taskcount++;
        }
    }

    # do not run task while doing find task
    my @findtasks = grep { $_ =~ m{ \A find \s+ }xms } keys %taskinfo_of;
    if ( $#findtasks >= 0 ) { return; }

    my $limit = $now + 60 * 10;
    RUN_TASK:
    while ( $taskcount < $maxtasks ) {
        my $nexttask = shift @taskqueue or return;
        my $taskkey = $nexttask->{key};
        if ( is_running($taskkey) ) { next RUN_TASK; }
        my $cmdstr = $nexttask->{cmd};
        logger->info("Run task : $cmdstr");
        system "$cmdstr &";
        # TODO: get pid of task
        $taskinfo_of{$taskkey} = { pid => undef, limit => $limit };
        $taskcount++;
        if ( $taskkey =~ m{ \A find \s+ }xms ) { last RUN_TASK; }
    }
}

sub add_task {
    my ($taskkey, $cmdstr) = @_;
    if ( ! $taskkey || ! $cmdstr ) { return; }
    QUEUE:
    foreach my $task ( @taskqueue ) {
        if ( $taskkey eq $task->{key} ) { return; }
    }
    push @taskqueue, { key => $taskkey, cmd => $cmdstr };
}

sub finish_task {
    my $taskkey = shift || "";
    if ( ! $taskkey ) { return; }
    logger->info("Finished task : $taskkey");
    delete $taskinfo_of{$taskkey};
}

sub is_running {
    my $taskkey = shift || "";
    exists $taskinfo_of{$taskkey};
}

sub kill_all_task {
    KILL_TASK:
    foreach my $key ( keys %taskinfo_of ) {
        my $task = $taskinfo_of{$key};
        my $pid = $task->{pid};
        if ( ! $pid ) { next KILL_TASK; }
        logger->notice("Kill task : $key");
        if ( kill(0, $pid) ) { kill 'INT', $pid; }
        delete $taskinfo_of{$key};
    }
}

sub get_common_option {
    my $needprojopt = shift || 0;
    my $currp = $projmanager->get_current_project;
    my $projnm = $needprojopt && $currp ? $currp->get_name : "";
    my $ret = "--cachedir '$cachedir' --loglevel '$loglvl' --logfile '$logfile' --projectnm '$projnm'";
    $ret .= " --port1 ".$scli->get_mainport;
    $ret .= " --port2 ".$scli->get_workport;
    $ret .= " --port3 ".$scli->get_resolveport;
    return $ret;
}

sub add_find_task {
    my ($global, $tasknm, @rootdirs) = @_;
    logger->notice("Add task find module of $tasknm");
    my $rootdiropt = "";
    ROOTDIR:
    foreach my $dir ( @rootdirs ) {
        $rootdiropt .= " --rootdir '$dir'";
    }
    add_task("find $tasknm", "plsense-worker-find --tasknm '$tasknm' $rootdiropt ".get_common_option($global ? 0 : 1));
    return;
}

sub get_config_path {
    return File::Spec->rel2abs( $ENV{HOME}."/.plsense" );
}

sub update_current_project {
    my $filepath = shift || "";
    my $add_find_task = shift || 0;
    if ( ! -f $filepath ) { return; }
    my $dirpath = dirname($filepath);
    my $confpath;
    DIR:
    while ( -d $dirpath ) {
        my $curr = $dirpath."/.plsense";
        if ( -f $curr ) {
            if ( $curr ne get_config_path() ) { $confpath = $curr; }
            last DIR;
        }
        $dirpath =~ s{ / [^/]+ $ }{}xms or last DIR;
    }
    if ( ! $confpath ) { $confpath = ""; }

    my $currp = $projmanager->get_current_project;
    if ( ! $currp && ! $confpath ) { return; }
    elsif ( $currp && $currp->get_confpath eq $confpath ) { return; }

    if ( ! $confpath ) {
        $projmanager->clear_current_project;
        $reqprojnm = "";
    }
    else {
        my $proj = $projmanager->open_project($confpath) or return;
        $reqprojnm = $proj->get_name;
        if ( $add_find_task ) {
            add_find_task(0, $proj->get_name, $proj->get_libpath);
        }
    }
    return 1;
}

sub sync_location {
    my $filepath = shift || "";
    if ( defined $reqprojnm ) {
        $scli->request_main_server("onproj ".$reqprojnm) or return;
        $reqprojnm = undef;
    }
    $scli->request_main_server("onfile ".$filepath) or return;
    return 1;
}



sub get_status {
    return "Running\n";
}

sub get_own_pid {
    return $$."\n";
}

sub remove_all {
    kill_all_task();
    initialize();
    return "Done\n";
}

sub build {
    my $mdl_or_files = shift || "";
    build_sentinel($mdl_or_files, 0);
}

sub build_recursive {
    my $mdl_or_files = shift || "";
    build_sentinel($mdl_or_files, 1);
}

sub build_force {
    my $mdl_or_files = shift || "";
    build_sentinel($mdl_or_files, 0, 1);
}

sub build_recursive_force {
    my $mdl_or_files = shift || "";
    build_sentinel($mdl_or_files, 1, 1);
}

sub build_sentinel {
    my $mdl_or_files = shift || "";
    my $recursive = shift || 0;
    my $force = shift || 0;
    my $not_update_current_project = shift || 0;
    my @mdl_or_files = split m{ \| }xms, $mdl_or_files;
    ENTRY:
    foreach my $mdl_or_file ( @mdl_or_files ) {
        $mdl_or_file =~ s{ ^\s+ }{}xms;
        $mdl_or_file =~ s{ \s+$ }{}xms;
        if ( ! $mdl_or_file ) { next ENTRY; }
        my ($mdlnm, $filepath, $target) = ("", "", "");
        if ( -f $mdl_or_file ) {
            $mdlnm = "main";
            $filepath = File::Spec->rel2abs($mdl_or_file);
            if ( ! $not_update_current_project ) {
                update_current_project($filepath);
            }
            $target = $filepath;
        }
        else {
            $mdlnm = $mdl_or_file;
            $target = $mdlnm;
        }
        my $taskkey = "build ".$target;
        if ( is_running($taskkey) ) {
            logger->info("Quit build '$mdl_or_file'. It's now building or build already");
            next ENTRY;
        }
        logger->notice("Add task build '$mdl_or_file'. recursive[$recursive]");
        my $currp = $projmanager->get_current_project;
        my $projlib = $currp ? $currp->get_libpath : "";
        my $cmd = "plsense-worker-build --target '$target' --libpath '$projlib' ".get_common_option(1);
        if ( $recursive ) { $cmd .= " --recursive" }
        if ( $force ) { $cmd .= " --force" }
        add_task($taskkey, $cmd);
    }
    return;
}

sub open_file {
    my $filepath = shift || "";
    $filepath =~ s{ ^\s+ }{}xms;
    $filepath =~ s{ \s+$ }{}xms;
    if ( ! -f $filepath ) {
        logger->error("Not exist file[$filepath]");
        return "Failed\n";
    }
    update_current_project(File::Spec->rel2abs($filepath), 1);
    build_sentinel($filepath, 1, 0, 1);
    return sync_location($filepath) ? "Done\n" : "Failed\n";
}

sub current_file {
    my $filepath = shift || "";
    $filepath =~ s{ ^\s+ }{}xms;
    $filepath =~ s{ \s+$ }{}xms;
    if ( ! -f $filepath ) {
        logger->error("Not exist file[$filepath]");
        return "Failed\n";
    }
    update_current_project(File::Spec->rel2abs($filepath), 1);
    return sync_location($filepath) ? "Done\n" : "Failed\n";
}

sub get_process_list {
    return join("\n", sort keys %taskinfo_of)."\n";
}

sub get_task_queue {
    my @ret;
    QUEUE:
    for my $i ( 0..$#taskqueue ) {
        push @ret, $taskqueue[$i]->{key};
    }
    return join("\n", @ret)."\n";
}

sub finish_find {
    my $tasknm = shift || "";
    $tasknm =~ s{ ^\s+ }{}xms;
    $tasknm =~ s{ \s+$ }{}xms;
    if ( ! $tasknm ) { return; }
    finish_task("find $tasknm");
    return;
}

sub finish_build {
    my $mdl_or_file = shift || "";
    $mdl_or_file =~ s{ ^\s+ }{}xms;
    $mdl_or_file =~ s{ \s+$ }{}xms;
    if ( ! $mdl_or_file ) { return; }
    my $taskkey = "build ".$mdl_or_file;
    finish_task($taskkey);
    return;
}


