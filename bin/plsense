#!/usr/local/bin/perl5.24.1-nt

use strict;
use warnings;
use Getopt::Long;
use IO::Socket;
use File::Spec;
use Config::Tiny;
use Try::Tiny;
use PlSense;
use PlSense::Logger;
use PlSense::SocketClient;

my %opthelp_of = ("-h, --help"        => "Show this message.",
                  "-v, --version"     => "Show vertion.",
                  "-i, --interactive" => "Run interactively.",
                  "-c, --cachedir"    => "Path of directory caching information for Completion/Help.",
                  "--port1"           => "Port number for listening by main server process. Default is 33333.",
                  "--port2"           => "Port number for listening by work server process. Default is 33334.",
                  "--port3"           => "Port number for listening by resolve server process. Default is 33335.",
                  "--maxtasks"        => "Limit count of task that run on server process.",
                  "--loglevel"        => "Level of logging. Its value is for Log::Handler.",
                  "--logfile"         => "Path of log file.",
                  );

my %fnchelp_of = ("help [Command]"                => [ "Show detail help about given Command." ],
                  "svstat, serverstatus"          => [ "Show server process status." ],
                  "svstart, serverstart"          => [ "Start server process." ],
                  "svstop, serverstop"            => [ "Stop server process." ],
                  "refresh"                       => [ "Refresh server process." ],
                  "o, open [File/Module]"         => [ "Open given File/Module.", <<'EOF'

Build information about given file path or module name if not yet build it.
Included modules (ex. 'use ...;') are built if not yet build it.

And exec onfile for given file path or module name.
For detail, see help of location command.

The build task is run on server process, and requires a few minutes until finish.
The status is shown by using the following commands.

ready, ps, queue

EOF
                                                       ],
                  "u, update [File/Module]"       => [ "Update given File/Module.", <<'EOF'

Build information about given file path or module name forcely.
Included modules (ex. 'use ...;') are built if not yet build it.

EOF
                                                       ],
                  "remove [File/Module]"          => [ "Remove cached information about given File/Module." ],
                  "removeall"                     => [ "Remove all cached information." ],
                  "mhelp, modhelp [Module]"       => [ "Show help about given Module." ],
                  "fhelp, subhelp [Sub] [Module]" => [ "Show help about given Function." ],
                  "vhelp, varhelp [Var] [Module]" => [ "Show help about given Variable." ],
                  "ahelp, assisthelp [Cand]"      => [ "Show help about given Candidate of last assist.", <<'EOF'

Candidate is a one of result of last assist command.
For detail, see help of assist command.

EOF
                                                       ],
                  "chelp, codehelp [Cade]"        => [ "Show help about given Code.", << 'EOF'

Code is a incomplete source code of Perl like the following line.

IO::File
my $io = IO::File->new
$io

EOF
                                                       ],
                  "subinfo [Cade]"                => [ "Show method information matched given Code.", <<'EOF'

Code is a incomplete source code of Perl like the following line.

&AnyModule::do_something
grep
my $io = IO::File->new

Result format is like the following.

NAME: Method-name
ARG1: Var-name As Unknown/Module-name/Var-type
ARG2: ...
Return: Var-name/Literal/NoIdent As Unknown/Module-name/Var-type

Var-type is a one of SCALAR, ARRAY, HASH, REFERENCE.
Literal means return value is literal (ex. return "hoge";).
NoIdent means return value is not variable/literal (ex. return grep ...;).
Unknown means still not clear.

EOF
                                                       ],
                  "onfile [File]"                 => [ "Set current location by given File for assist.", <<'EOF'

Set given file path as current filepath.
And set 'main' as current module automatically.
And set '' as current function automatically.

EOF
                                                       ],
                  "onmod [Module]"                => [ "Set current location by given Module for assist.", <<'EOF'

Set given module name as current module.
And set '' as current function automatically.

EOF
                                                       ],
                  "onf, onsub [Sub]"              => [ "Set current location by given Function for assist.", <<'EOF'

Set given function name as current function.

EOF
                                                       ],
                  "loc, location"                 => [ "Show value about current project/filepath/module/function.", <<'EOF'

Current location is where you are.

The filepath/module/function is set by onfile/onmod/onsub command.
For detail, see help of them.

The project is set automatically by .plsense that is file at root of project tree.

For example,
If exec open/onfile /home/user1/MyProj/src/lib/MyModule.pm
Seek .plsense in following order excluding '~/.plsense' that is config file for plsense.

/home/user1/MyProj/src/lib/.plsense
/home/user1/MyProj/src/.plsense
...

If not found, the project value is 'default'.

.plsense format is the following.

name=PROJECT-NAME
lib-path=LIBRABY-PATH

PROJECT-NAME is required match '[a-zA-Z0-9_]+'.
LIBRARY-PATH is a relative path to root of library for the project.

About '~/.plsense', see help of config command.

EOF
                                                       ],
                  "c, codeadd [Code]"             => [ "Add source for current location.", <<'EOF'

Add information for current location by build information about given Code.
This command is a substitute for open, update command.
This command is lighter than them.

Abount current location, see help of location command.

Code is a incomplete source code of Perl like the following line.

use List::AllUtils qw{ :al
for $i ( 0.. 10 ) { print $i; }
sub hoge { my $self = shift; if ( $self ) { do_anything(); } return "hog

EOF
                                                       ],
                  "a, assist [Code]"              => [ "Do assist for given Code.", <<'EOF'

Assist is a optimized completion.
It means showing available word after given Code.

Code is a incomplete source code of Perl like the following line.

use 
Use IO::F
$
$self->

For optimize, assist needs where you are.
Abount it, see help of location command.

EOF
                                                       ],
                  "ps"                            => [ "Show task list that is running on server process." ],
                  "queue"                         => [ "Show stack of task that is not yet running on server process." ],
                  "ready [File/Module]"           => [ "Show status about given File/Module is ready.", <<'EOF'

If not given any argument, show list of module that is ready.

EOF
                                                       ],
                  "debugstk"                      => [ "Show quantity of stocked on server process for debugging." ],
                  "debugmod [File/Module]"        => [ "Show detail information of given Module for debugging." ],
                  "debugrt [Regexp]"              => [ "Show routing information matched given Regexp for debugging." ],
                  "debugsubst [Regexp]"           => [ "Show substitute information matched given Regexp for debugging." ],
                  "debuglex [Code]"               => [ "Show result of parsing given Code by PPI::Lexer for debugging." ],
                  "config"                        => [ "Update configuration about plsense.", <<'EOF'

Configuration is saved in '~/.plsense'.
The format is the following.

OPTION-NAME=VALUE
...

OPTION-NAME is a name of option.
About option, exec 'plsense --help'.

Writing configuration in '~/.plsense' means giving '--OPTION-NAME=VALUE' when execut plsense.
You can override the option in '~/.plsense' by executing 'plsense --OPTION-NAME=VALUE'.

EOF
                                                       ],
                  );

my %function_of = (help         => \&show_help,
                   serverstatus => \&show_server_status,
                   svstat       => \&show_server_status,
                   serverstop   => \&stop_server,
                   svstop       => \&stop_server,
                   serverstart  => \&start_server,
                   svstart      => \&start_server,
                   refresh      => \&refresh_server,
                   open         => \&open_file,
                   o            => \&open_file,
                   update       => \&update_file,
                   u            => \&update_file,
                   remove       => \&remove_file,
                   removeall    => \&remove_all,
                   modhelp      => \&help_module,
                   mhelp        => \&help_module,
                   subhelp      => \&help_method,
                   fhelp        => \&help_method,
                   varhelp      => \&help_variable,
                   vhelp        => \&help_variable,
                   assisthelp   => \&help_last_assist,
                   ahelp        => \&help_last_assist,
                   codehelp     => \&help_code,
                   chelp        => \&help_code,
                   subinfo      => \&get_method_information,
                   onfile       => \&set_currentfile,
                   onmod        => \&set_currentmodule,
                   onsub        => \&set_currentmethod,
                   onf          => \&set_currentmethod,
                   location     => \&get_current_location,
                   loc          => \&get_current_location,
                   codeadd      => \&add_source,
                   c            => \&add_source,
                   assist       => \&assist_coding,
                   a            => \&assist_coding,
                   ps           => \&get_process_list,
                   queue        => \&get_task_queue,
                   ready        => \&is_ready,
                   debugstk     => \&debug_stocked,
                   debugmod     => \&debug_module,
                   debugrt      => \&debug_routing,
                   debugsubst   => \&debug_substitute,
                   debuglex     => \&debug_lexer,
                   config       => \&update_config,
                   );

$0 = join(" ",('plsense',@ARGV));
my ($cachedir, $port1, $port2, $port3, $maxtasks, $loglvl, $logfile);
my $interactive = 0;
GetOptions ('help'        => sub { show_usage(); exit 0; },
            'version'     => sub { print "PlSense version is $PlSense::VERSION\n"; exit 0; },
            'cachedir=s'  => \$cachedir,
            'port1=i'     => \$port1,
            'port2=i'     => \$port2,
            'port3=i'     => \$port3,
            'maxtasks=i'  => \$maxtasks,
            'loglevel=s'  => \$loglvl,
            'logfile=s'   => \$logfile,
            'interactive' => \$interactive,
            );

setup_logger($loglvl, $logfile);
if ( ! $cachedir ) {
    logger->info("Read option from config file.");
    create_config();
    my $c = get_config();
    if ( $c ) {
        $cachedir = $c->{cachedir};
        $port1 ||= $c->{port1};
        $port2 ||= $c->{port2};
        $port3 ||= $c->{port3};
        $maxtasks ||= $c->{maxtasks};
        $loglvl ||= $c->{loglevel};
        $logfile ||= $c->{logfile};
        setup_logger($loglvl, $logfile);
    }
}
if ( ! $loglvl ) { $loglvl = ''; }
if ( ! $logfile ) { $logfile = ''; }
if ( ! $maxtasks || $maxtasks !~ m{ ^\d+$ }xms ) { $maxtasks = 20; }

my $scli = PlSense::SocketClient->new({ mainport => $port1,
                                        workport => $port2,
                                        resolveport => $port3,
                                        retryinterval => 0.2,
                                        maxretry => 10 });
my %pid_of;

if ( $interactive ) {

    print "> ";
    *STDOUT->autoflush();
    CMD:
    while ( my $line = <STDIN> ) {
        chomp $line;
        my $cmdnm = $line =~ s{ ^ \s* ([a-z]+) }{}xms ? $1 : "";
        if ( $cmdnm eq "quit" ) {
            last CMD;
        }
        elsif ( $cmdnm eq "exit" ) {
            last CMD;
        }
        elsif ( exists $function_of{$cmdnm} ) {
            logger->notice("Do $cmdnm : $line");
            my $fnc = $function_of{$cmdnm};
            print &$fnc($line);
        }
        elsif ( $cmdnm ) {
            print STDERR "Unknown command : $cmdnm\n";
        }
        print "> ";
    }

}
else {

    my @cmdarg = @ARGV;
    my $cmdnm = shift @cmdarg || "";
    if ( ! $cmdnm ) {
        show_usage();
        exit 1;
    }
    elsif ( ! exists $function_of{$cmdnm} ) {
        print STDERR "Unknown command : $cmdnm\n";
        exit 1;
    }

    my $line = join(" ", @cmdarg);
    logger->notice("Do $cmdnm : $line");
    my $fnc = $function_of{$cmdnm};
    print &$fnc($line);

}

exit 0;


sub show_usage {
    my $optstr = "";
    OPTHELP:
    foreach my $key ( sort keys %opthelp_of ) {
        $optstr .= sprintf("  %-25s %s\n", $key, $opthelp_of{$key});
    }
    my $comstr = "";
    FUNCTION_HELP:
    foreach my $key ( sort keys %fnchelp_of ) {
        $comstr .= sprintf("  %-35s %s\n", $key, @{$fnchelp_of{$key}}[0]);
    }

    print <<"EOF";
PlSense is a development tool for Perl.
PlSense provides Completion/Help about Module/Function/Variable optimized for context.

Usage:
  plsense [Option] [Command] argument...
  plsense [Option] -i

Option:
$optstr
Command:
$comstr
EOF
    return;
}

sub show_help {
    my $cmdnm = shift || "";
    $cmdnm =~ s{ ^\s+ }{}xms;
    $cmdnm =~ s{ \s+$ }{}xms;
    if ( $cmdnm =~ m{ \A[a-z]+\z }xms ) {
        FHELP:
        foreach my $key ( keys %fnchelp_of ) {
            if ( $key =~ m{ \b $cmdnm \b }xms ) {
                print @{$fnchelp_of{$key}}[0]."\n";
                if ( $#{$fnchelp_of{$key}} == 1 ) {
                    print @{$fnchelp_of{$key}}[1];
                }
                return;
            }
        }
    }
    print "Unknown command : $cmdnm\n";
    print "Command name list at the following.\n";
    print join("\n", sort keys %function_of)."\n";
    return;
}


sub get_common_option {
    my $ret = "--cachedir '$cachedir' --loglevel '$loglvl' --logfile '$logfile'";
    $ret .= " --port1 ".$scli->get_mainport;
    $ret .= " --port2 ".$scli->get_workport;
    $ret .= " --port3 ".$scli->get_resolveport;
    return $ret;
}

sub start_main_server {
    my $immediately = shift || 0;
    return start_server_sentinel("main", $immediately);
}
sub start_work_server {
    my $immediately = shift || 0;
    return start_server_sentinel("work", $immediately);
}
sub start_resolve_server {
    my $immediately = shift || 0;
    return start_server_sentinel("resolve", $immediately);
}
sub start_server_sentinel {
    my $svtype = shift || "";
    my $immediately = shift || 0;

    my $pid = $pid_of{$svtype};
    if ( $pid && kill(0, $pid) ) { return 1; }

    if ( ! $immediately ) {
        $pid = $svtype eq "main"    ? $scli->get_main_server_response("pid", { ignore_error => 1, maxretry => 5 })
             : $svtype eq "work"    ? $scli->get_work_server_response("pid", { ignore_error => 1, maxretry => 5 })
             : $svtype eq "resolve" ? $scli->get_resolve_server_response("pid", { ignore_error => 1, maxretry => 5 })
             :                        0;
        if ( $pid ) {
            $pid_of{$svtype} = $pid;
            return 1;
        }
    }

    my $cmdnm = "plsense-server-".$svtype;
    my $etcopt = $svtype eq "work" ? " --maxtasks $maxtasks" : "";
    my $cmdstr = "$cmdnm ".get_common_option().$etcopt;
    logger->info("Start server : $cmdstr");
    system "$cmdstr &";

    $pid = $svtype eq "main"    ? $scli->get_main_server_response("pid", { ignore_error => 1, maxretry => 10 })
         : $svtype eq "work"    ? $scli->get_work_server_response("pid", { ignore_error => 1, maxretry => 10 })
         : $svtype eq "resolve" ? $scli->get_resolve_server_response("pid", { ignore_error => 1, maxretry => 10 })
         :                        0;
    if ( ! $pid || ! kill(0, $pid) ) { return 0; }
    $pid_of{$svtype} = $pid;
    logger->info("Got pid of $svtype : $pid");
    return 1;
}

sub stop_main_server {
    return stop_server_sentinel("main");
}
sub stop_work_server {
    return stop_server_sentinel("work");
}
sub stop_resolve_server {
    return stop_server_sentinel("resolve");
}
sub stop_server_sentinel {
    my $svtype = shift || "";
    my $pid = $pid_of{$svtype};
    if ( $pid && ! kill(0, $pid) ) {
        $pid_of{$svtype} = undef;
        return 1;
    }

    my $ret = $svtype eq "main"    ? $scli->request_main_server("stop", { ignore_error => 1, maxretry => 15 })
            : $svtype eq "work"    ? $scli->request_work_server("stop", { ignore_error => 1, maxretry => 15 })
            : $svtype eq "resolve" ? $scli->request_resolve_server("stop", { ignore_error => 1, maxretry => 15 })
            :                        undef;
    if ( $ret ) {
        logger->info("Request stop to $svtype");
        $pid_of{$svtype} = undef;
        return 1;
    }
    elsif ( $pid ) {
        logger->info("Send SIGWINCH to $svtype");
        kill 'WINCH', $pid;
        $pid_of{$svtype} = undef;
        return 1;
    }

    return 1;
}



sub show_server_status {
    my $mainstat = $scli->get_main_server_response("status", { ignore_error => 1, maxretry => 5 });
    my $workstat = $scli->get_work_server_response("status", { ignore_error => 1, maxretry => 5 });
    my $resolvestat = $scli->get_resolve_server_response("status", { ignore_error => 1, maxretry => 5 });
    chomp $mainstat;
    chomp $workstat;
    chomp $resolvestat;
    if ( ! $mainstat ) { $mainstat = $pid_of{main} && kill(0, $pid_of{main}) ? "Busy" : "Not running"; }
    if ( ! $workstat ) { $workstat = $pid_of{work} && kill(0, $pid_of{work}) ? "Busy" : "Not running"; }
    if ( ! $resolvestat ) { $resolvestat = $pid_of{resolve} && kill(0, $pid_of{resolve}) ? "Busy" : "Not running"; }
    my $ret = "Main Server is $mainstat.\n";
    $ret .= "Work Server is $workstat.\n";
    $ret .= "Resolve Server is $resolvestat.\n";
    return $ret;
}

sub start_server {
    if ( ! $cachedir ) {
        logger->fatal("Required information for cachedir. For more information, run 'plsense --help'");
        return;
    }
    if ( ! -d $cachedir && ! mkdir($cachedir) ) {
        logger->fatal("Failed create cache directory [$cachedir]");
        return;
    }
    if ( ! verify_commands() ) { return; }
    my $mainret = start_main_server();
    my $workret = start_work_server();
    my $resolveret = start_resolve_server();
    return $mainret && $workret && $resolveret ? "Done\n" : "Failed\n";
}

sub stop_server {
    my $mainret = stop_main_server();
    my $workret = stop_work_server();
    my $resolveret = stop_resolve_server();
    return $mainret && $workret && $resolveret ? "Done\n" : "Failed\n";
}

sub refresh_server {
    # SVTYPE:
    # foreach my $svtype ( "main", "work", "resolve" ) {
    #     my $pid = $pid_of{$svtype};
    #     if ( ! $pid ) {
    #         $pid = $svtype eq "main"    ? $scli->get_main_server_response("pid", { maxretry => 20 })
    #              : $svtype eq "work"    ? $scli->get_work_server_response("pid", { maxretry => 20 })
    #              : $svtype eq "resolve" ? $scli->get_resolve_server_response("pid", { maxretry => 20 })
    #              :                        0;
    #         $pid_of{$svtype} = $pid;
    #     }
    #     if ( ! $pid ) { last SVTYPE; }
    #     kill 'USR1', $pid;
    # }

    my $mainpid = $pid_of{main} || $scli->get_main_server_response("pid", { maxretry => 20 });
    my $workpid = $pid_of{work} || $scli->get_work_server_response("pid", { maxretry => 20 });
    my $resolvepid = $pid_of{resolve} || $scli->get_resolve_server_response("pid", { maxretry => 20 });
    if ( ! $mainpid || ! $workpid || ! $resolvepid ) { return "Failed\n"; }

    my $loc = get_current_location() or return "Failed\n";
    my $currfilepath = $loc =~ m{ ^ File: \s+ ([^\n]*?) $ }xms ? $1 : "";
    my $currmdlnm = $loc =~ m{ ^ Module: \s+ ([^\n]*?) $ }xms ? $1 : "";
    my $currmtdnm = $loc =~ m{ ^ Sub: \s+ ([^\n]*?) $ }xms ? $1 : "";

    kill 'WINCH', $mainpid;
    WAIT:
    for my $i ( 1..5 ) {
        if ( ! kill(0, $mainpid) ) { last WAIT; }
        sleep 1;
    }
    my $mainret = start_main_server(1);

    kill 'HUP', $workpid;

    kill 'WINCH', $resolvepid;
    WAIT:
    for my $i ( 1..5 ) {
        if ( ! kill(0, $resolvepid) ) { last WAIT; }
        sleep 1;
    }
    my $resolveret = start_resolve_server(1);

    if ( ! $mainret || ! $resolveret ) { return "Failed\n"; }

    set_currentfile($currfilepath);
    set_currentmodule($currmdlnm);
    set_currentmethod($currmtdnm);

    return "Done\n";
}

sub open_file {
    my $filepath = shift || "";
    return $scli->get_work_server_response("open $filepath");
}

sub update_file {
    my $filepath = shift || "";
    $scli->request_work_server("buildrf $filepath");
    return;
}

sub remove_file {
    my $filepath = shift || "";
    $scli->request_main_server("remove $filepath");
    $scli->request_resolve_server("remove $filepath");
    return;
}

sub remove_all {
    $scli->get_main_server_response("removeall");
    $scli->get_work_server_response("removeall");
    $scli->get_resolve_server_response("removeall");
    return "Done\n";
}

sub help_module {
    my $mdlnm = shift || "";
    return $scli->get_main_server_response("modhelp $mdlnm");
}

sub help_method {
    my $arg = shift || "";
    $arg =~ s{ ^\s+ }{}xms;
    my @e = split m{ \s+ }xms, $arg;
    my $mtdnm = shift @e || "";
    my $mdlnm = shift @e || "";
    return $scli->get_main_server_response("subhelp $mtdnm $mdlnm");
}

sub help_variable {
    my $arg = shift || "";
    $arg =~ s{ ^\s+ }{}xms;
    my @e = split m{ \s+ }xms, $arg;
    my $varnm = shift @e || "";
    my $mdlnm = shift @e || "";
    return $scli->get_main_server_response("varhelp $varnm $mdlnm");
}

sub help_last_assist {
    my $candidate = shift || "";
    return $scli->get_main_server_response("assisthelp $candidate");
}

sub help_code {
    my $code = shift || "";
    return $scli->get_main_server_response("codehelp $code");
}

sub get_method_information {
    my $code = shift || "";
    return $scli->get_main_server_response("subinfo $code");
}

sub set_currentfile {
    my $filepath = shift || "";
    return $scli->get_work_server_response("current $filepath");
}

sub set_currentmodule {
    my $mdlnm = shift || "";
    return $scli->get_main_server_response("onmod $mdlnm");
}

sub set_currentmethod {
    my $mtdnm = shift || "";
    return $scli->get_main_server_response("onsub $mtdnm");
}

sub get_current_location {
    return $scli->get_main_server_response("location");
}

sub add_source {
    my $code = shift || "";
    $scli->request_resolve_server("codeadd $code");
    return;
}

sub assist_coding {
    my $code = shift || "";
    return $scli->get_main_server_response("codeassist $code");
}

sub get_process_list {
    return $scli->get_work_server_response("ps");
}

sub get_task_queue {
    return $scli->get_work_server_response("queue");
}

sub is_ready {
    my $mdl_or_file = shift || "";
    return $scli->get_main_server_response("ready $mdl_or_file");
}

sub debug_stocked {
    my $ret = "[MainServer]\n";
    $ret .= $scli->get_main_server_response("debugstk");
    $ret .= "[ResolveServer]\n";
    $ret .= $scli->get_resolve_server_response("debugstk");
    return $ret;
}

sub debug_module {
    my $mdl_or_file = shift || "";
    return $scli->get_main_server_response("debugmod $mdl_or_file");
}

sub debug_routing {
    my $regexp = shift || "";
    return $scli->get_main_server_response("debugrt $regexp");
}

sub debug_substitute {
    my $regexp = shift || "";
    return $scli->get_resolve_server_response("debugsubst $regexp");
}

sub debug_lexer {
    my $code = shift || "";
    return $scli->get_main_server_response("debuglex $code");
}

sub update_config {
    create_config(1);
    my $c = get_config() or return;
    $cachedir = $c->{cachedir};
    $port1 = $c->{port1};
    $port2 = $c->{port2};
    $port3 = $c->{port3};
    $maxtasks = $c->{maxtasks};
    return "Finished update config\n";
}

sub get_config_path {
    return File::Spec->rel2abs( $ENV{HOME}."/.plsense" );
}

sub get_config {
    my $confpath = get_config_path();
    if ( ! -f $confpath ) { return; }
    my $fh;
    if ( ! open($fh, '<:utf8', $confpath) ) {
        print STDERR "Failed open [$confpath] : $!\n";
        return;
    }
    my $c = Config::Tiny->read_string( do { local $/; <$fh> } );
    if ( ! close $fh ) {
        print STDERR "Failed close [$confpath] : $!\n";
        return;
    }
    my $ret = {};
    $ret->{cachedir} = $c->{_}{cachedir};
    $ret->{port1} = $c->{_}{port1};
    $ret->{port2} = $c->{_}{port2};
    $ret->{port3} = $c->{_}{port3};
    $ret->{maxtasks} = $c->{_}{maxtasks};
    $ret->{loglevel} = $c->{_}{loglevel};
    $ret->{logfile} = $c->{_}{logfile};
    return $ret;
}

sub create_config {
    my $update = shift || 0;
    my $confpath = get_config_path();
    if ( ! $update && -f $confpath ) { return; }
    if ( ! -f $confpath ) {
        my $ret = read_string("Not exist config file [$confpath]\nMaking? (Y/n) ");
        if ( $ret && lc($ret) ne 'y' && lc($ret) ne 'yes' ) {
            print "Not create/update [$confpath]\n";
            return;
        }
    }
    my $defaultdir = File::Spec->rel2abs( $ENV{HOME}."/.plsense.d" );
    my $old = get_config();
    my $c = Config::Tiny->new;
    $c->{_}{cachedir} = read_string("Input cache directory path: ($defaultdir) ") || $defaultdir;
    $c->{_}{port1} = read_string("Input port number for main server: (33333) ") || 33333;
    $c->{_}{port2} = read_string("Input port number for work server: (33334) ") || 33334;
    $c->{_}{port3} = read_string("Input port number for resolve server: (33335) ") || 33335;
    $c->{_}{maxtasks} = read_string("Input limit count of task on server: (20) ") || 20;
    $c->{_}{loglevel} = $old ? $old->{loglevel} : "";
    $c->{_}{logfile} = $old ? $old->{logfile} : "";
    WRITE:
    for ( my $str = $c->write_string ) {
        my $fh;
        if ( ! open($fh, '>:utf8', $confpath) ) {
            print STDERR "Failed open [$confpath] : $!\n";
            last WRITE;
        }
        print $fh $str or print STDERR "Failed write [$str] to [$confpath] : $!\n";
        close $fh or print STDERR "Failed close [$confpath] : $!\n";
    }
}

sub read_string {
    my $prompt = shift || "";
    print $prompt;
    my $ret = <STDIN>;
    $ret =~ s{ ^\s+ }{}xms;
    $ret =~ s{ \s+$ }{}xms;
    return $ret;
}

sub verify_commands {
    my @chkcommands = ("which", "perldoc");
    CHK_COMMAND:
    foreach my $command ( @chkcommands ) {
        my $ret = qx{ which $command 2>/dev/null };
        if ( ! $ret ) {
            logger->fatal("Can't execute '$command'.");
            return 0;
        }
    }
    return 1;
}

